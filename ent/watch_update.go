// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/karatekaneen/stockybot/ent/predicate"
	"github.com/karatekaneen/stockybot/ent/security"
	"github.com/karatekaneen/stockybot/ent/watch"
)

// WatchUpdate is the builder for updating Watch entities.
type WatchUpdate struct {
	config
	hooks    []Hook
	mutation *WatchMutation
}

// Where appends a list predicates to the WatchUpdate builder.
func (wu *WatchUpdate) Where(ps ...predicate.Watch) *WatchUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetWatchedSince sets the "watched_since" field.
func (wu *WatchUpdate) SetWatchedSince(t time.Time) *WatchUpdate {
	wu.mutation.SetWatchedSince(t)
	return wu
}

// SetNillableWatchedSince sets the "watched_since" field if the given value is not nil.
func (wu *WatchUpdate) SetNillableWatchedSince(t *time.Time) *WatchUpdate {
	if t != nil {
		wu.SetWatchedSince(*t)
	}
	return wu
}

// SetUserID sets the "user_id" field.
func (wu *WatchUpdate) SetUserID(s string) *WatchUpdate {
	wu.mutation.SetUserID(s)
	return wu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wu *WatchUpdate) SetNillableUserID(s *string) *WatchUpdate {
	if s != nil {
		wu.SetUserID(*s)
	}
	return wu
}

// SetWatchingID sets the "watching" edge to the Security entity by ID.
func (wu *WatchUpdate) SetWatchingID(id int) *WatchUpdate {
	wu.mutation.SetWatchingID(id)
	return wu
}

// SetNillableWatchingID sets the "watching" edge to the Security entity by ID if the given value is not nil.
func (wu *WatchUpdate) SetNillableWatchingID(id *int) *WatchUpdate {
	if id != nil {
		wu = wu.SetWatchingID(*id)
	}
	return wu
}

// SetWatching sets the "watching" edge to the Security entity.
func (wu *WatchUpdate) SetWatching(s *Security) *WatchUpdate {
	return wu.SetWatchingID(s.ID)
}

// Mutation returns the WatchMutation object of the builder.
func (wu *WatchUpdate) Mutation() *WatchMutation {
	return wu.mutation
}

// ClearWatching clears the "watching" edge to the Security entity.
func (wu *WatchUpdate) ClearWatching() *WatchUpdate {
	wu.mutation.ClearWatching()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WatchUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WatchUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WatchUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WatchUpdate) check() error {
	if v, ok := wu.mutation.UserID(); ok {
		if err := watch.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Watch.user_id": %w`, err)}
		}
	}
	return nil
}

func (wu *WatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(watch.Table, watch.Columns, sqlgraph.NewFieldSpec(watch.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.WatchedSince(); ok {
		_spec.SetField(watch.FieldWatchedSince, field.TypeTime, value)
	}
	if value, ok := wu.mutation.UserID(); ok {
		_spec.SetField(watch.FieldUserID, field.TypeString, value)
	}
	if wu.mutation.WatchingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watch.WatchingTable,
			Columns: []string{watch.WatchingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(security.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WatchingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watch.WatchingTable,
			Columns: []string{watch.WatchingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(security.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WatchUpdateOne is the builder for updating a single Watch entity.
type WatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WatchMutation
}

// SetWatchedSince sets the "watched_since" field.
func (wuo *WatchUpdateOne) SetWatchedSince(t time.Time) *WatchUpdateOne {
	wuo.mutation.SetWatchedSince(t)
	return wuo
}

// SetNillableWatchedSince sets the "watched_since" field if the given value is not nil.
func (wuo *WatchUpdateOne) SetNillableWatchedSince(t *time.Time) *WatchUpdateOne {
	if t != nil {
		wuo.SetWatchedSince(*t)
	}
	return wuo
}

// SetUserID sets the "user_id" field.
func (wuo *WatchUpdateOne) SetUserID(s string) *WatchUpdateOne {
	wuo.mutation.SetUserID(s)
	return wuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wuo *WatchUpdateOne) SetNillableUserID(s *string) *WatchUpdateOne {
	if s != nil {
		wuo.SetUserID(*s)
	}
	return wuo
}

// SetWatchingID sets the "watching" edge to the Security entity by ID.
func (wuo *WatchUpdateOne) SetWatchingID(id int) *WatchUpdateOne {
	wuo.mutation.SetWatchingID(id)
	return wuo
}

// SetNillableWatchingID sets the "watching" edge to the Security entity by ID if the given value is not nil.
func (wuo *WatchUpdateOne) SetNillableWatchingID(id *int) *WatchUpdateOne {
	if id != nil {
		wuo = wuo.SetWatchingID(*id)
	}
	return wuo
}

// SetWatching sets the "watching" edge to the Security entity.
func (wuo *WatchUpdateOne) SetWatching(s *Security) *WatchUpdateOne {
	return wuo.SetWatchingID(s.ID)
}

// Mutation returns the WatchMutation object of the builder.
func (wuo *WatchUpdateOne) Mutation() *WatchMutation {
	return wuo.mutation
}

// ClearWatching clears the "watching" edge to the Security entity.
func (wuo *WatchUpdateOne) ClearWatching() *WatchUpdateOne {
	wuo.mutation.ClearWatching()
	return wuo
}

// Where appends a list predicates to the WatchUpdate builder.
func (wuo *WatchUpdateOne) Where(ps ...predicate.Watch) *WatchUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WatchUpdateOne) Select(field string, fields ...string) *WatchUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Watch entity.
func (wuo *WatchUpdateOne) Save(ctx context.Context) (*Watch, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WatchUpdateOne) SaveX(ctx context.Context) *Watch {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WatchUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WatchUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WatchUpdateOne) check() error {
	if v, ok := wuo.mutation.UserID(); ok {
		if err := watch.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Watch.user_id": %w`, err)}
		}
	}
	return nil
}

func (wuo *WatchUpdateOne) sqlSave(ctx context.Context) (_node *Watch, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(watch.Table, watch.Columns, sqlgraph.NewFieldSpec(watch.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Watch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, watch.FieldID)
		for _, f := range fields {
			if !watch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != watch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.WatchedSince(); ok {
		_spec.SetField(watch.FieldWatchedSince, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.UserID(); ok {
		_spec.SetField(watch.FieldUserID, field.TypeString, value)
	}
	if wuo.mutation.WatchingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watch.WatchingTable,
			Columns: []string{watch.WatchingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(security.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WatchingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watch.WatchingTable,
			Columns: []string{watch.WatchingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(security.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Watch{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
