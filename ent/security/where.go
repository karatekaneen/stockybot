// Code generated by ent, DO NOT EDIT.

package security

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/karatekaneen/stockybot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Security {
	return predicate.Security(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Security {
	return predicate.Security(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Security {
	return predicate.Security(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Security {
	return predicate.Security(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Security {
	return predicate.Security(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Security {
	return predicate.Security(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Security {
	return predicate.Security(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldName, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldCountry, v))
}

// LinkName applies equality check predicate on the "link_name" field. It's identical to LinkNameEQ.
func LinkName(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldLinkName, v))
}

// List applies equality check predicate on the "list" field. It's identical to ListEQ.
func List(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldList, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Security {
	return predicate.Security(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Security {
	return predicate.Security(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Security {
	return predicate.Security(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Security {
	return predicate.Security(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Security {
	return predicate.Security(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Security {
	return predicate.Security(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Security {
	return predicate.Security(sql.FieldContainsFold(FieldName, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Security {
	return predicate.Security(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Security {
	return predicate.Security(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Security {
	return predicate.Security(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Security {
	return predicate.Security(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Security {
	return predicate.Security(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Security {
	return predicate.Security(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Security {
	return predicate.Security(sql.FieldContainsFold(FieldCountry, v))
}

// LinkNameEQ applies the EQ predicate on the "link_name" field.
func LinkNameEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldLinkName, v))
}

// LinkNameNEQ applies the NEQ predicate on the "link_name" field.
func LinkNameNEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldNEQ(FieldLinkName, v))
}

// LinkNameIn applies the In predicate on the "link_name" field.
func LinkNameIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldIn(FieldLinkName, vs...))
}

// LinkNameNotIn applies the NotIn predicate on the "link_name" field.
func LinkNameNotIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldNotIn(FieldLinkName, vs...))
}

// LinkNameGT applies the GT predicate on the "link_name" field.
func LinkNameGT(v string) predicate.Security {
	return predicate.Security(sql.FieldGT(FieldLinkName, v))
}

// LinkNameGTE applies the GTE predicate on the "link_name" field.
func LinkNameGTE(v string) predicate.Security {
	return predicate.Security(sql.FieldGTE(FieldLinkName, v))
}

// LinkNameLT applies the LT predicate on the "link_name" field.
func LinkNameLT(v string) predicate.Security {
	return predicate.Security(sql.FieldLT(FieldLinkName, v))
}

// LinkNameLTE applies the LTE predicate on the "link_name" field.
func LinkNameLTE(v string) predicate.Security {
	return predicate.Security(sql.FieldLTE(FieldLinkName, v))
}

// LinkNameContains applies the Contains predicate on the "link_name" field.
func LinkNameContains(v string) predicate.Security {
	return predicate.Security(sql.FieldContains(FieldLinkName, v))
}

// LinkNameHasPrefix applies the HasPrefix predicate on the "link_name" field.
func LinkNameHasPrefix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasPrefix(FieldLinkName, v))
}

// LinkNameHasSuffix applies the HasSuffix predicate on the "link_name" field.
func LinkNameHasSuffix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasSuffix(FieldLinkName, v))
}

// LinkNameIsNil applies the IsNil predicate on the "link_name" field.
func LinkNameIsNil() predicate.Security {
	return predicate.Security(sql.FieldIsNull(FieldLinkName))
}

// LinkNameNotNil applies the NotNil predicate on the "link_name" field.
func LinkNameNotNil() predicate.Security {
	return predicate.Security(sql.FieldNotNull(FieldLinkName))
}

// LinkNameEqualFold applies the EqualFold predicate on the "link_name" field.
func LinkNameEqualFold(v string) predicate.Security {
	return predicate.Security(sql.FieldEqualFold(FieldLinkName, v))
}

// LinkNameContainsFold applies the ContainsFold predicate on the "link_name" field.
func LinkNameContainsFold(v string) predicate.Security {
	return predicate.Security(sql.FieldContainsFold(FieldLinkName, v))
}

// ListEQ applies the EQ predicate on the "list" field.
func ListEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldList, v))
}

// ListNEQ applies the NEQ predicate on the "list" field.
func ListNEQ(v string) predicate.Security {
	return predicate.Security(sql.FieldNEQ(FieldList, v))
}

// ListIn applies the In predicate on the "list" field.
func ListIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldIn(FieldList, vs...))
}

// ListNotIn applies the NotIn predicate on the "list" field.
func ListNotIn(vs ...string) predicate.Security {
	return predicate.Security(sql.FieldNotIn(FieldList, vs...))
}

// ListGT applies the GT predicate on the "list" field.
func ListGT(v string) predicate.Security {
	return predicate.Security(sql.FieldGT(FieldList, v))
}

// ListGTE applies the GTE predicate on the "list" field.
func ListGTE(v string) predicate.Security {
	return predicate.Security(sql.FieldGTE(FieldList, v))
}

// ListLT applies the LT predicate on the "list" field.
func ListLT(v string) predicate.Security {
	return predicate.Security(sql.FieldLT(FieldList, v))
}

// ListLTE applies the LTE predicate on the "list" field.
func ListLTE(v string) predicate.Security {
	return predicate.Security(sql.FieldLTE(FieldList, v))
}

// ListContains applies the Contains predicate on the "list" field.
func ListContains(v string) predicate.Security {
	return predicate.Security(sql.FieldContains(FieldList, v))
}

// ListHasPrefix applies the HasPrefix predicate on the "list" field.
func ListHasPrefix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasPrefix(FieldList, v))
}

// ListHasSuffix applies the HasSuffix predicate on the "list" field.
func ListHasSuffix(v string) predicate.Security {
	return predicate.Security(sql.FieldHasSuffix(FieldList, v))
}

// ListEqualFold applies the EqualFold predicate on the "list" field.
func ListEqualFold(v string) predicate.Security {
	return predicate.Security(sql.FieldEqualFold(FieldList, v))
}

// ListContainsFold applies the ContainsFold predicate on the "list" field.
func ListContainsFold(v string) predicate.Security {
	return predicate.Security(sql.FieldContainsFold(FieldList, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Security {
	return predicate.Security(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Security {
	return predicate.Security(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Security {
	return predicate.Security(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Security {
	return predicate.Security(sql.FieldNotIn(FieldType, vs...))
}

// HasWatchers applies the HasEdge predicate on the "watchers" edge.
func HasWatchers() predicate.Security {
	return predicate.Security(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WatchersTable, WatchersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWatchersWith applies the HasEdge predicate on the "watchers" edge with a given conditions (other predicates).
func HasWatchersWith(preds ...predicate.Watch) predicate.Security {
	return predicate.Security(func(s *sql.Selector) {
		step := newWatchersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Security) predicate.Security {
	return predicate.Security(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Security) predicate.Security {
	return predicate.Security(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Security) predicate.Security {
	return predicate.Security(sql.NotPredicates(p))
}
