// Code generated by ent, DO NOT EDIT.

package security

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the security type in the database.
	Label = "security"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldLinkName holds the string denoting the link_name field in the database.
	FieldLinkName = "link_name"
	// FieldList holds the string denoting the list field in the database.
	FieldList = "list"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeWatchers holds the string denoting the watchers edge name in mutations.
	EdgeWatchers = "watchers"
	// Table holds the table name of the security in the database.
	Table = "securities"
	// WatchersTable is the table that holds the watchers relation/edge.
	WatchersTable = "watches"
	// WatchersInverseTable is the table name for the Watch entity.
	// It exists in this package in order to avoid circular dependency with the "watch" package.
	WatchersInverseTable = "watches"
	// WatchersColumn is the table column denoting the watchers relation/edge.
	WatchersColumn = "security_watchers"
)

// Columns holds all SQL columns for security fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCountry,
	FieldLinkName,
	FieldList,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CountryValidator is a validator for the "country" field. It is called by the builders before save.
	CountryValidator func(string) error
	// ListValidator is a validator for the "list" field. It is called by the builders before save.
	ListValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeStock Type = "stock"
	TypeIndex Type = "index"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeStock, TypeIndex:
		return nil
	default:
		return fmt.Errorf("security: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Security queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByLinkName orders the results by the link_name field.
func ByLinkName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkName, opts...).ToFunc()
}

// ByList orders the results by the list field.
func ByList(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldList, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByWatchersCount orders the results by watchers count.
func ByWatchersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWatchersStep(), opts...)
	}
}

// ByWatchers orders the results by watchers terms.
func ByWatchers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWatchersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newWatchersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WatchersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WatchersTable, WatchersColumn),
	)
}
