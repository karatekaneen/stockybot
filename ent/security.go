// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/karatekaneen/stockybot/ent/security"
)

// Security is the model entity for the Security schema.
type Security struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// LinkName holds the value of the "link_name" field.
	LinkName string `json:"link_name,omitempty"`
	// List holds the value of the "list" field.
	List string `json:"list,omitempty"`
	// Type holds the value of the "type" field.
	Type security.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SecurityQuery when eager-loading is set.
	Edges        SecurityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SecurityEdges holds the relations/edges for other nodes in the graph.
type SecurityEdges struct {
	// Watchers holds the value of the watchers edge.
	Watchers []*Watch `json:"watchers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WatchersOrErr returns the Watchers value or an error if the edge
// was not loaded in eager-loading.
func (e SecurityEdges) WatchersOrErr() ([]*Watch, error) {
	if e.loadedTypes[0] {
		return e.Watchers, nil
	}
	return nil, &NotLoadedError{edge: "watchers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Security) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case security.FieldID:
			values[i] = new(sql.NullInt64)
		case security.FieldName, security.FieldCountry, security.FieldLinkName, security.FieldList, security.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Security fields.
func (s *Security) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case security.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case security.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case security.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				s.Country = value.String
			}
		case security.FieldLinkName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_name", values[i])
			} else if value.Valid {
				s.LinkName = value.String
			}
		case security.FieldList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field list", values[i])
			} else if value.Valid {
				s.List = value.String
			}
		case security.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = security.Type(value.String)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Security.
// This includes values selected through modifiers, order, etc.
func (s *Security) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryWatchers queries the "watchers" edge of the Security entity.
func (s *Security) QueryWatchers() *WatchQuery {
	return NewSecurityClient(s.config).QueryWatchers(s)
}

// Update returns a builder for updating this Security.
// Note that you need to call Security.Unwrap() before calling this method if this Security
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Security) Update() *SecurityUpdateOne {
	return NewSecurityClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Security entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Security) Unwrap() *Security {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Security is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Security) String() string {
	var builder strings.Builder
	builder.WriteString("Security(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(s.Country)
	builder.WriteString(", ")
	builder.WriteString("link_name=")
	builder.WriteString(s.LinkName)
	builder.WriteString(", ")
	builder.WriteString("list=")
	builder.WriteString(s.List)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Securities is a parsable slice of Security.
type Securities []*Security
