// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/karatekaneen/stockybot/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/karatekaneen/stockybot/ent/security"
	"github.com/karatekaneen/stockybot/ent/watch"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Security is the client for interacting with the Security builders.
	Security *SecurityClient
	// Watch is the client for interacting with the Watch builders.
	Watch *WatchClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Security = NewSecurityClient(c.config)
	c.Watch = NewWatchClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Security: NewSecurityClient(cfg),
		Watch:    NewWatchClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Security: NewSecurityClient(cfg),
		Watch:    NewWatchClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Security.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Security.Use(hooks...)
	c.Watch.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Security.Intercept(interceptors...)
	c.Watch.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *SecurityMutation:
		return c.Security.mutate(ctx, m)
	case *WatchMutation:
		return c.Watch.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// SecurityClient is a client for the Security schema.
type SecurityClient struct {
	config
}

// NewSecurityClient returns a client for the Security from the given config.
func NewSecurityClient(c config) *SecurityClient {
	return &SecurityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `security.Hooks(f(g(h())))`.
func (c *SecurityClient) Use(hooks ...Hook) {
	c.hooks.Security = append(c.hooks.Security, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `security.Intercept(f(g(h())))`.
func (c *SecurityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Security = append(c.inters.Security, interceptors...)
}

// Create returns a builder for creating a Security entity.
func (c *SecurityClient) Create() *SecurityCreate {
	mutation := newSecurityMutation(c.config, OpCreate)
	return &SecurityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Security entities.
func (c *SecurityClient) CreateBulk(builders ...*SecurityCreate) *SecurityCreateBulk {
	return &SecurityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SecurityClient) MapCreateBulk(slice any, setFunc func(*SecurityCreate, int)) *SecurityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SecurityCreateBulk{err: fmt.Errorf("calling to SecurityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SecurityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SecurityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Security.
func (c *SecurityClient) Update() *SecurityUpdate {
	mutation := newSecurityMutation(c.config, OpUpdate)
	return &SecurityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityClient) UpdateOne(s *Security) *SecurityUpdateOne {
	mutation := newSecurityMutation(c.config, OpUpdateOne, withSecurity(s))
	return &SecurityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityClient) UpdateOneID(id int) *SecurityUpdateOne {
	mutation := newSecurityMutation(c.config, OpUpdateOne, withSecurityID(id))
	return &SecurityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Security.
func (c *SecurityClient) Delete() *SecurityDelete {
	mutation := newSecurityMutation(c.config, OpDelete)
	return &SecurityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecurityClient) DeleteOne(s *Security) *SecurityDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SecurityClient) DeleteOneID(id int) *SecurityDeleteOne {
	builder := c.Delete().Where(security.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityDeleteOne{builder}
}

// Query returns a query builder for Security.
func (c *SecurityClient) Query() *SecurityQuery {
	return &SecurityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSecurity},
		inters: c.Interceptors(),
	}
}

// Get returns a Security entity by its id.
func (c *SecurityClient) Get(ctx context.Context, id int) (*Security, error) {
	return c.Query().Where(security.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityClient) GetX(ctx context.Context, id int) *Security {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWatchers queries the watchers edge of a Security.
func (c *SecurityClient) QueryWatchers(s *Security) *WatchQuery {
	query := (&WatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(security.Table, security.FieldID, id),
			sqlgraph.To(watch.Table, watch.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, security.WatchersTable, security.WatchersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecurityClient) Hooks() []Hook {
	return c.hooks.Security
}

// Interceptors returns the client interceptors.
func (c *SecurityClient) Interceptors() []Interceptor {
	return c.inters.Security
}

func (c *SecurityClient) mutate(ctx context.Context, m *SecurityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SecurityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SecurityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SecurityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SecurityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Security mutation op: %q", m.Op())
	}
}

// WatchClient is a client for the Watch schema.
type WatchClient struct {
	config
}

// NewWatchClient returns a client for the Watch from the given config.
func NewWatchClient(c config) *WatchClient {
	return &WatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `watch.Hooks(f(g(h())))`.
func (c *WatchClient) Use(hooks ...Hook) {
	c.hooks.Watch = append(c.hooks.Watch, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `watch.Intercept(f(g(h())))`.
func (c *WatchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Watch = append(c.inters.Watch, interceptors...)
}

// Create returns a builder for creating a Watch entity.
func (c *WatchClient) Create() *WatchCreate {
	mutation := newWatchMutation(c.config, OpCreate)
	return &WatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Watch entities.
func (c *WatchClient) CreateBulk(builders ...*WatchCreate) *WatchCreateBulk {
	return &WatchCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WatchClient) MapCreateBulk(slice any, setFunc func(*WatchCreate, int)) *WatchCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WatchCreateBulk{err: fmt.Errorf("calling to WatchClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WatchCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Watch.
func (c *WatchClient) Update() *WatchUpdate {
	mutation := newWatchMutation(c.config, OpUpdate)
	return &WatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WatchClient) UpdateOne(w *Watch) *WatchUpdateOne {
	mutation := newWatchMutation(c.config, OpUpdateOne, withWatch(w))
	return &WatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WatchClient) UpdateOneID(id int) *WatchUpdateOne {
	mutation := newWatchMutation(c.config, OpUpdateOne, withWatchID(id))
	return &WatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Watch.
func (c *WatchClient) Delete() *WatchDelete {
	mutation := newWatchMutation(c.config, OpDelete)
	return &WatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WatchClient) DeleteOne(w *Watch) *WatchDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WatchClient) DeleteOneID(id int) *WatchDeleteOne {
	builder := c.Delete().Where(watch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WatchDeleteOne{builder}
}

// Query returns a query builder for Watch.
func (c *WatchClient) Query() *WatchQuery {
	return &WatchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWatch},
		inters: c.Interceptors(),
	}
}

// Get returns a Watch entity by its id.
func (c *WatchClient) Get(ctx context.Context, id int) (*Watch, error) {
	return c.Query().Where(watch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WatchClient) GetX(ctx context.Context, id int) *Watch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySecurity queries the security edge of a Watch.
func (c *WatchClient) QuerySecurity(w *Watch) *SecurityQuery {
	query := (&SecurityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(watch.Table, watch.FieldID, id),
			sqlgraph.To(security.Table, security.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, watch.SecurityTable, watch.SecurityColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WatchClient) Hooks() []Hook {
	return c.hooks.Watch
}

// Interceptors returns the client interceptors.
func (c *WatchClient) Interceptors() []Interceptor {
	return c.inters.Watch
}

func (c *WatchClient) mutate(ctx context.Context, m *WatchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WatchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WatchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WatchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Watch mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Security, Watch []ent.Hook
	}
	inters struct {
		Security, Watch []ent.Interceptor
	}
)
