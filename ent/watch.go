// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/karatekaneen/stockybot/ent/security"
	"github.com/karatekaneen/stockybot/ent/watch"
)

// Watch is the model entity for the Watch schema.
type Watch struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WatchedSince holds the value of the "watched_since" field.
	WatchedSince time.Time `json:"watched_since,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WatchQuery when eager-loading is set.
	Edges             WatchEdges `json:"edges"`
	security_watchers *int64
	selectValues      sql.SelectValues
}

// WatchEdges holds the relations/edges for other nodes in the graph.
type WatchEdges struct {
	// Security holds the value of the security edge.
	Security *Security `json:"security,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SecurityOrErr returns the Security value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WatchEdges) SecurityOrErr() (*Security, error) {
	if e.Security != nil {
		return e.Security, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: security.Label}
	}
	return nil, &NotLoadedError{edge: "security"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Watch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case watch.FieldID:
			values[i] = new(sql.NullInt64)
		case watch.FieldUserID:
			values[i] = new(sql.NullString)
		case watch.FieldWatchedSince:
			values[i] = new(sql.NullTime)
		case watch.ForeignKeys[0]: // security_watchers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Watch fields.
func (w *Watch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case watch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case watch.FieldWatchedSince:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field watched_since", values[i])
			} else if value.Valid {
				w.WatchedSince = value.Time
			}
		case watch.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				w.UserID = value.String
			}
		case watch.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field security_watchers", value)
			} else if value.Valid {
				w.security_watchers = new(int64)
				*w.security_watchers = int64(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Watch.
// This includes values selected through modifiers, order, etc.
func (w *Watch) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QuerySecurity queries the "security" edge of the Watch entity.
func (w *Watch) QuerySecurity() *SecurityQuery {
	return NewWatchClient(w.config).QuerySecurity(w)
}

// Update returns a builder for updating this Watch.
// Note that you need to call Watch.Unwrap() before calling this method if this Watch
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Watch) Update() *WatchUpdateOne {
	return NewWatchClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Watch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Watch) Unwrap() *Watch {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Watch is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Watch) String() string {
	var builder strings.Builder
	builder.WriteString("Watch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("watched_since=")
	builder.WriteString(w.WatchedSince.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(w.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// Watches is a parsable slice of Watch.
type Watches []*Watch
