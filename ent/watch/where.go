// Code generated by ent, DO NOT EDIT.

package watch

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/karatekaneen/stockybot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Watch {
	return predicate.Watch(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Watch {
	return predicate.Watch(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Watch {
	return predicate.Watch(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Watch {
	return predicate.Watch(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Watch {
	return predicate.Watch(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Watch {
	return predicate.Watch(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Watch {
	return predicate.Watch(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Watch {
	return predicate.Watch(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Watch {
	return predicate.Watch(sql.FieldLTE(FieldID, id))
}

// WatchedSince applies equality check predicate on the "watched_since" field. It's identical to WatchedSinceEQ.
func WatchedSince(v time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldEQ(FieldWatchedSince, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Watch {
	return predicate.Watch(sql.FieldEQ(FieldUserID, v))
}

// WatchedSinceEQ applies the EQ predicate on the "watched_since" field.
func WatchedSinceEQ(v time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldEQ(FieldWatchedSince, v))
}

// WatchedSinceNEQ applies the NEQ predicate on the "watched_since" field.
func WatchedSinceNEQ(v time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldNEQ(FieldWatchedSince, v))
}

// WatchedSinceIn applies the In predicate on the "watched_since" field.
func WatchedSinceIn(vs ...time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldIn(FieldWatchedSince, vs...))
}

// WatchedSinceNotIn applies the NotIn predicate on the "watched_since" field.
func WatchedSinceNotIn(vs ...time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldNotIn(FieldWatchedSince, vs...))
}

// WatchedSinceGT applies the GT predicate on the "watched_since" field.
func WatchedSinceGT(v time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldGT(FieldWatchedSince, v))
}

// WatchedSinceGTE applies the GTE predicate on the "watched_since" field.
func WatchedSinceGTE(v time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldGTE(FieldWatchedSince, v))
}

// WatchedSinceLT applies the LT predicate on the "watched_since" field.
func WatchedSinceLT(v time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldLT(FieldWatchedSince, v))
}

// WatchedSinceLTE applies the LTE predicate on the "watched_since" field.
func WatchedSinceLTE(v time.Time) predicate.Watch {
	return predicate.Watch(sql.FieldLTE(FieldWatchedSince, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Watch {
	return predicate.Watch(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Watch {
	return predicate.Watch(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Watch {
	return predicate.Watch(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Watch {
	return predicate.Watch(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Watch {
	return predicate.Watch(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Watch {
	return predicate.Watch(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Watch {
	return predicate.Watch(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Watch {
	return predicate.Watch(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Watch {
	return predicate.Watch(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Watch {
	return predicate.Watch(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Watch {
	return predicate.Watch(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Watch {
	return predicate.Watch(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Watch {
	return predicate.Watch(sql.FieldContainsFold(FieldUserID, v))
}

// HasSecurity applies the HasEdge predicate on the "security" edge.
func HasSecurity() predicate.Watch {
	return predicate.Watch(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SecurityTable, SecurityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSecurityWith applies the HasEdge predicate on the "security" edge with a given conditions (other predicates).
func HasSecurityWith(preds ...predicate.Security) predicate.Watch {
	return predicate.Watch(func(s *sql.Selector) {
		step := newSecurityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Watch) predicate.Watch {
	return predicate.Watch(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Watch) predicate.Watch {
	return predicate.Watch(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Watch) predicate.Watch {
	return predicate.Watch(sql.NotPredicates(p))
}
